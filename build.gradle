plugins {
    id "org.sonarqube" version "3.3"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    ext {
        junitVersion = '5.8.2'
        javaVersion = JavaVersion.VERSION_17
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        maven { url 'https://m2.enimaloc.fr/maven/' }
        mavenLocal()
    }

    sonarqube {
        properties {
            property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
            property "sonar.projectVersion", "0.0.0"
            property "sonar.coverage.jacoco.xmlReportPaths", "jacoco/${name}.exec"
            if (System.getenv("GITHUB_EVENT_NAME") == "pull_request") {
                property "sonar.pullrequest.key", System.getenv("GITHUB_SHA")
                property "sonar.pullrequest.branch", System.getenv("GITHUB_HEAD_REF")
                property "sonar.pullrequest.base", System.getenv("GITHUB_REF_NAME")
            } else {
                property "sonar.branch.name", System.getenv("GITHUB_REF_NAME")
            }
        }
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic:1.3.0-alpha4'
        implementation 'org.slf4j:slf4j-api:1.8.0-beta4'

        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testImplementation "fr.enimaloc.enutils:tests:0.5.0"
    }

    test {
        useJUnitPlatform()
//        if (System.getenv("CI") == null) {
//            System.out.println("Not on CI, settings working directory to `run/`")
//            workingDir "run/"
//        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
    test.finalizedBy jacocoTestReport
}